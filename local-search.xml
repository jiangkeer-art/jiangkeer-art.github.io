<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于图像模糊和光吸收的水下图像恢复</title>
    <link href="/jiangkeer-art.github.io/2022/04/14/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A%E5%92%8C%E5%85%89%E5%90%B8%E6%94%B6%E7%9A%84%E6%B0%B4%E4%B8%8B%E5%9B%BE%E5%83%8F%E6%81%A2%E5%A4%8D/"/>
    <url>/jiangkeer-art.github.io/2022/04/14/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A%E5%92%8C%E5%85%89%E5%90%B8%E6%94%B6%E7%9A%84%E6%B0%B4%E4%B8%8B%E5%9B%BE%E5%83%8F%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="基于图像模糊和光吸收的水下图像恢复"><a href="#基于图像模糊和光吸收的水下图像恢复" class="headerlink" title="基于图像模糊和光吸收的水下图像恢复"></a>基于图像模糊和光吸收的水下图像恢复</h1><p>最近研究了一些关于水下图像去雾恢复的东西，虽然没有写出来什么，但是读到了一些论文，这里写一下论文的研究过程以及原理之类的，论文是Underwater Image Restoration Based on Image Blurriness and Light Absorption，在IEEE上找的。</p><span id="more"></span><h2 id="首先是原理解释"><a href="#首先是原理解释" class="headerlink" title="首先是原理解释"></a>首先是原理解释</h2><p><img src="http://cnd.jiangkeer.icu/image_0_2_0.jpg"></p><p>上图中a表述了简化的水下场景成像的模型(IFM)，其中的I(X)指的是在像素x处观察到的强度，由透射图TM t(x)与背景光(BL) B混合场景辐射J(x)组成。TM描述了未散射或被吸收并且到达相机的场景辐射。下面的五张图片显示了具有不同背景光(BL)的五个水下图像。</p><h2 id="具体实现流程"><a href="#具体实现流程" class="headerlink" title="具体实现流程"></a>具体实现流程</h2><p>首先从水下图像中的模糊区域中选择BL，然后基于BL获得深度图和TM用来恢复场景辐射。</p><h3 id="图像模糊估计"><a href="#图像模糊估计" class="headerlink" title="图像模糊估计"></a>图像模糊估计</h3><p>模糊估计共有三个步骤，首先是进行初始模糊图Pinit的计算，公式在下面：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX411.jpg"><br>其中Ig是输入图像Ic的灰度版本，ri=2i<em>n+1，并且n为4，接下来使用最大滤波器来计算粗糙模糊度图Pr：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX412.jpg"><br>其中<img src="http://cnd.jiangkeer.icu/INNERLATEXT411.jpg">是以x为中心的z</em>z局部补丁，设置z为7，随后使用soft matting来平滑生成一个模糊图像Pblr：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX414.jpg"><br>其中Cr是填充孔的形态重建算子，Fg是soft matting。</p><h3 id="背景光估计"><a href="#背景光估计" class="headerlink" title="背景光估计"></a>背景光估计</h3><p>有了图像模糊之后就是背景光估计(BL)，BL确定水下图像的色调以及其恢复的场景辐射。下面是基于图像模糊和方差来估计BL的算法：<br><img src="http://cnd.jiangkeer.icu/linetable_5_1_0.jpg"><br>其从输入图像中的前0.1％模糊像素，最低方差区域和最大模糊区域中选取三个BL候选。使用四叉树分解来确定这两个区域（可以相同或不同），根据方差或模糊度将输入图像迭代地划分为四个相等大小的块。通过对模糊图中的对应区域中的Pblr（x）求平均来获得输入图像中的区域的模糊性。确定了三个BL候选者后，我们根据输入图像分别为每个颜色通道选择BL。</p><h3 id="基于光吸收和图像模糊的深度估计"><a href="#基于光吸收和图像模糊的深度估计" class="headerlink" title="基于光吸收和图像模糊的深度估计"></a>基于光吸收和图像模糊的深度估计</h3><p>这里使用了三种深度估计的方法进行估计场景深度，随后将三种方法进行组合，得到最后的场景深度。</p><h4 id="首先是第一的方法，直接通过红色通道图获得第一次深度估计"><a href="#首先是第一的方法，直接通过红色通道图获得第一次深度估计" class="headerlink" title="首先是第一的方法，直接通过红色通道图获得第一次深度估计"></a>首先是第一的方法，直接通过红色通道图获得第一次深度估计</h4><p>下面是红色通道图R的定义：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX520.jpg"><br>随后进行深度估计：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX521.jpg"><br>其中Fs是拉伸函数：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX522.jpg"><br>V是向量。</p><h4 id="随后是第二次深度估计"><a href="#随后是第二次深度估计" class="headerlink" title="随后是第二次深度估计"></a>随后是第二次深度估计</h4><p><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX523.jpg"><br>使用Eq和Fs与Dmip进行估计，下面是Dmip的计算方法。<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX210.jpg"></p><h4 id="第三次深度估计"><a href="#第三次深度估计" class="headerlink" title="第三次深度估计"></a>第三次深度估计</h4><p>使用方程式中的图像模糊度Pr进行深度估计。<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX524.jpg"></p><h3 id="TM估计和场景辐射恢复"><a href="#TM估计和场景辐射恢复" class="headerlink" title="TM估计和场景辐射恢复"></a>TM估计和场景辐射恢复</h3><p>首先是根据公式计算TM：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX128.jpg"><br>它使用从摄像机到场景点的深度，为了测量从摄像机到每个场景点的距离，还必须估计最近的场景点和摄像机之间的距离d0：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX620.jpg"><br>结合Eq，最终场景深度为：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX621.jpg"><br>其中D是用于将相对距离转换为实际距离的缩放常数。<br>使用~df，我们可以将红色通道的TM计算为：<br><img src="http://cnd.jiangkeer.icu/PARAGRAPHLATEX622.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>图像增强</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>图像增强</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/jiangkeer-art.github.io/2022/04/13/hello-world/"/>
    <url>/jiangkeer-art.github.io/2022/04/13/hello-world/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b641dcd8cb6a844cfea0e72de95915d2017febf1560a7bbfe68486c1bc1196db">4630436162ade97ba2718b7d0c4b3b63f97fe7f487088031e1ec7f30c37889e17af4f6297068ec459b8609dd5e773f884c55009995b4e2fa14cd0ad5eff0ada9f9fb8fb348a39322f64a27b4e67198e9d0918355853825b4a8b859e1b0997d0838db13d93eb663a75abf26151a4cd6693bc3399e41eef6d4a0d8ac518bee9c9ddee4d733ecfde4f1c7c01610b2139c3f919d321e3580e4ea4d25333a1eb6a757138158c91746eb650d2bd292b639e6c34cbf144f87d98390fac9f8662146f06c3a6438c2b9ee94e1d311e783b3870047c72629be8369de61aafcfd95d1a6b146908a00176e823191858046b0d3068b0efa543f002c4411ac17d84cfbc5419db7d33e0dec60d5febc26877845ea4a0c78edbec57ec484cb94f4a5981b779247299a083552613550cf2067f03e18806e1d8b7363322598e505c747f93d1e38576db45e8de5d1770b452a4fb1219a730e7968e9f6fbb48dd64088b4f6b768d41ae0fde1188c840a5b26f4bcf87fc459371861bccf009fd56466bfb6189998e9e6a70ba3621ca8bdf949e5cadcc118f51f127a91581910ae3b260b6d0fb0cee64121e5e66307f456c243225aa77a3858e9e6baa0bb6fbec7f066233f796299f0fa9e1fe0c4cc9ecdec835fb5c680519cf717ac37ce80351440030539e97a6025d7df8e5b9a38723d5752f0ba629da523bce1492683233e54ea7bccc05c30fd1e719e3d4446e3e90d37e5efc5da7c1a69677526d22a4268c0d2fa84c84561baa88f1b18d2da0af845e9d31981b1afbab7c627f5c655920720785ccba4ec1fefd5bff10d3ee24d78294b4024ea671925ae671a96c138892d3028d582b52befb65a7291084ac08968fe9a27f2d47d5549f0c62d804621cf01a0437f0ec0dfb636c0d27ae16f3b454e50afa12d8c950f353746b3d986832a1a0ffebca1670c0207c686d6d81e6cf29af66f5b2b393cf14caf4feb4c1a355ff73baa87a1b99f3247b76a3d643113df8f7ee201a7651659b487b9d9a4b56c91fcc1314240844f1d3ef15ad0004fa48fb51560364314c6b3aa2ec29c11e90eeee4db050621ee006d9b554de8c20897cb11233fbf29c13b939859000fd1a6ff23c8f1b267b280e5f115e7d0d534e8b2fed3c2f2d4a6f517a281c0d59edd9257fba317bfa39d6bc6e398cd5dd3c7679f275529b960999f2284dc1c41d159b619722080ae4a5cc98dbfe9c4dcddfa10d5d37966f15ee3a6b7c337533f65df6463db8d4544cf0c62e48a3eeb2c9be2e34fe48d28f0368a63fa1e097466b0b1fc3ed1751998ac56b19ad267120159a0341ecfa097a3faf2716c30006ad594f9fe2ba72355925d9710bee4f14a98856d2559a7d1b6b89b5984a53bd8468b5af123c9c77c6715e165ed90c59244ee30104d3ec590a6d8d2664ff7f748ddba901d5280239d1317fe00ac21c8c064d04a697e3b975e9d00312dfdea77271f0aee78d274b6a3b86ea954c8ad4166219a76cf254d5a670e611b5f3b5023fd7dcc51df7a2f5d2f339122f4d9e9e51c8621158620ae43d5fbbe4b7bc480f617071bb76d9c32d69be87612f053dce47b4ad846d62cfd9a77d21be2ad8b2fec83b04ceea03f73fd576abe11abeb7aab9ca7c0f8b07e9e1c28ec9a062a3ec0bd285ab9f6a956a9136be99707534e1df7afc9744843116b499195155b1b3cc1da81b4f83c2502f597615c22e4908bf6d0f8ca7c1994732fc40b7bb9cd9cdc7615c6c043f11ed550544454d4fa7f6e7541e62019124391e2f78ca9c0a6648a7e7ea1b3b9ec3ff4a5a7c02dcd92bacb61480a8c6284bf56a77702724e13409a425316ba4879755c68540efe86d123ba5d03440deb99abb818ef8ce9498c28074e333939c82ed73ccabc7108c5067c3e4318d9ecbebf7a2fe3530873163ec1ca51971ab507f58bfe853d70ebcb0b703d80b861289f465bf69d45c213f6e73a2d39a6221493bd833f676eba851e5d8fba67a5afe4e85999902e8e303dc7b08608b8c76a7ddd974f9a10459a6137054b98776d34b4956dfe3de1ef193d61ec28f6ec658be26232f7d26eff5ed52845e28a4bf3e5f804eb35fa29114a06edf6a4a628d69606ac4554355d52cbf9b3c8ee5da32f7e610f24f6d971382204b8f54bfd7ddd465faf114efd8f0d50d17f2254511b559172105960d105c4314619862b504c01b766828aab77c369844dc6ce01bfaf95c5131c82856b3832ff0dfc2a4b7c7d0b6ed130011333c7c53c66532b761436f9ea2e4d34b57b1c6912ab49c01a57269f424c588ab131c89da9b214a4dd1fee206b430812feeccdcd29a803111591f1109f7826138c88b5dc2e712079d123c1131e29065e9b7280ced1b1f905f74acd09775645be269018892a7f58d8b21db86f4f24bb127d04fb2fbd908c2f4981262009745b51bfae92d3ba2c67e0d41b3d3e108521bd0315b3362ea5edde48175568868e1db88a20e54ef08cc9ce4e65abfa579a649a1935f3082bb41a344239148e5f81efe7baa54dccd1cee3eff06f034832821516626a80f3edfeb71e3327b4ef681f20f5ac4187bc7bc84f5ecd04c3301356b43cae414fb1422a76117824f892bc92dc2b06d6556ef77a1d3335faaaed80c25163f19a9e5fc92ff7825b8ea676be019b47cb8a065df974f935c1092656875b7726e0009e30907d45003cd977878dc43b61ea8de3c92bb2bbe8c133ba0af7662220c9e5f7d896cdf599a78398c50b3fd003f5d20a6d1dd06143923181574ed84605b8b35c6da5eb7307b98c0fa9d91dac30a1135d3f8e95d2e3144d83df95a55c2f0cc4dcde140cdae538425303b1fe4fbc63d8b60f084dd7cb56cb6be24c24479e647dcb6fd169690cf4a241b7e1d6b2c0b0218d97035ccbfb6a65a974167c94b929d3f198a943e85012d48d66c2439779ee62fef0eab14435a1d792365ba787b62c42bae5cdc1207542a4f74e054a8793d7e3a793d89ccbc63e8493823d7f97f9934636c9c0f0f45526f4ffa1cc086b9dc609977aa7997d417d29584acd93a8764725b5b30895462e22647cfb59767da5c36bf9cd9bbf9c821e4222b6755ae279e65aa3ea4f1b3bd80e13e08e026d618ded9c3fa3bac84a4b0576c4a95cff175c3fc0437c114e89d425f8fd758cb5aeac95db314559e20045e2073937412c9c88ffdf4b092d3b9afd380df1f1d605b8d5fca42634e642687547e67a6002ee69ef</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/jiangkeer-art.github.io/lib/hbe.js"></script><link href="/jiangkeer-art.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>作为日记加密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>hello-world</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小说大纲？</title>
    <link href="/jiangkeer-art.github.io/2022/01/05/%E5%B0%8F%E8%AF%B4%E5%A4%A7%E7%BA%B2%EF%BC%9F/"/>
    <url>/jiangkeer-art.github.io/2022/01/05/%E5%B0%8F%E8%AF%B4%E5%A4%A7%E7%BA%B2%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a9eb808f8e96cf37b89d4647ff76a3b087b5367d7b6f4b9f87490eb19e47b321">0a6004fcdf23cb0ca239960f852ab09ac32834941464499ae8394dda3f1c4ff21437822930f02aae61247f65b7fe0637a82f70ec87264b6e1730c287c95c0f4bf0f236b34c2732e9787d8c3f61f3cd80365dd9832c172c4ecd000a93bb1dabe72de429a1c764edbf0f07396a94042bd80b9b37fde3debb644b5d95d0eaa4233f16032b8eaf50cd3d0b7c8d7c99f0712d03988d3c99a7faf1f7415b92eb6a9181efca87f851b260b609196bcc65b4fb22ec3a1bce93a6739f53f19aa847daf70bf7877cc4ae546963dd30e6c118c615c226d7bfd54fb44fc15836bf39f1a41ffbafcf77f24bddea10145272f0ed3af9ae6b375292f50e9c487ed9bba51e81e58a03d69d0f687c0d02591ea69443f78318d582a85e685055ae681347f45c2ed9d31da63991d72d01c0983171b54994a036e66b19b644dddeef891fd4df347dd688ba78bad53f522bfa9c5c2729e6821be3cb299cf9859f30581d9daf129508af027b3fef0fb8e0386f545df2d7c104052960e002d212f3ae5ee52709efdaafb88856d13c26b172a5778881052d0cadc23ef944f6d1c4ee97088bb878c532bb71661bd69b6509dd186a760ff9acf8fe093d003c76eb29de87727b865afc9676bad6327bd95a818ef7fa6c79df83d00c27cef9c382170dc4bfc3f48e99914248957a6423d89fa83dc72762e9e643e32e5010fc38ec3f43089f7bc9f3a826d0962d2e5fb20701a7efbd1e7a5fd6f249a78610526d446c903e007fccdeebdf334626e1273ef1ba6c1378859ae9f82addccf6020c9ef4aad8aba0a870d331a14906b653329480412bdfe503795d101908dc7642583f0b7e249a801911d0f7697f0f27d2ba5ce894576062d027104ea891c7b57c9fc12efb3724bf508a37ffd7cf1eec38cdbafff2fb183e332e03b499b39534a84cfeee390052befebd232b5434a23cae3470fa1fb95fd734b449f3419e7d185c576f07b1f7b521fe1f06385f84b13b8acfaed693bb7e9465242d6d735111dcc314f29888551cbddf93270152921be851cd7fa23443d97eda0d3bd8f7eb31bbbc24ca8f051de7c3293b83b51b5ac748bd2d0ed8d69d3728ba13af96277c569c766e8059e99411c7bf024fb83a9266d4c5338671b88d749fadcc7265a372324ee227781991adf9c5e81f39b635fd6cdea648f8800bc6bacfd1780af81de2008504d32c8d873d864cd9ca86a0578b1b5e0c99b789d22539be290abdc1f59bc5c09cb32c1c9e564b0d86150524eeff387a6baa0e132b52b982c3514382077437bbf9184978a78b04975b3c38729066898798df081ce12422919bdf7c10ad42ede7948a88a691bd6d45df2755ec4d855979b57e0f02e07ca1188d1d54e69dece4bac6ee60ab6260a3e980d41343ff6bc1ff6b644273b4f4f52aef6700bc5e4c5d7afd91110525a1f2ea317d191bd062b24931af192630ebe84179bac2020fc90270f79f2c2fad1b00770d38b849c20efc63067c18fd51d647e797fe2eb3539526e33413b79cea84ef8c2c58cc98d89ac6264b715aa2ee59cece3166c2a307b1f44e0037e189f8e13a8af66acd182b66d5f3f159c9fa6f8e5072d08bbd553a05446c6052782ab5098a091d69159b9d4315f9e0ea436073b75e5d755220b2fe3ca5e60e38685f6976c2f1c14cc1f98f91dd7b26990b65974a3ea655e198ab407f1559f8b1b53245cb9325de68bba78e06359f36773508d207ed75fab9b62ae1d032a2604860ccd4c3d60288345372b90171c82b76e7758cbf0b309065d76e1ea0d0479fd5ae7d0216441351b5f66f829ef607c0aaa775feaa609e2160ce2fffb90a78b4f840146df3b4a8b83dfb59fdc2f7823897fcc6adcb46fea65fb3d0feb97da8acee76b499fe15fc3be0a2d52acc51488437c68de543f62c6cef12324377b72c5b080528dc0e0a370f0569e68e3aa70fc633c3ddd549d7c95d7e060eaa0be5ae09bc9bc714d0c7a0dcae2ff7330e2730053a48ef138462a850ddd2ed0575d7afc4a320d24d810ff916cb63c4b0309b5ba191e3779aea1d91e69139603d4e43aa0ed64678e252a012761430c7ff70adb0336d0ec010da7d1b88e35062f567e57a0fd103b5b69db16eff5e8c90526c14f228a3ba8a568f50818b78d673cda4d2e25733d4c212bb5f7d462cbe0e9fd34016d8a25e56de09266e688cb51fe1f364111da87bf0ba91ea839f1595404bcc57a1b7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/jiangkeer-art.github.io/lib/hbe.js"></script><link href="/jiangkeer-art.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>小说</category>
      
      <category>作为日记加密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小说</tag>
      
      <tag>大纲</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小说2</title>
    <link href="/jiangkeer-art.github.io/2022/01/05/%E5%B0%8F%E8%AF%B42/"/>
    <url>/jiangkeer-art.github.io/2022/01/05/%E5%B0%8F%E8%AF%B42/</url>
    
    <content type="html"><![CDATA[<h2 id="序言2"><a href="#序言2" class="headerlink" title="序言2"></a>序言2</h2><p>这章应该会正式确定出比赛内容，也就是之后最主要要讲的事情，但是具体是什么，我自己也不清楚。XD</p><span id="more"></span><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2>]]></content>
    
    
    <categories>
      
      <category>小说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小说</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小说</title>
    <link href="/jiangkeer-art.github.io/2021/11/06/%E5%B0%8F%E8%AF%B4/"/>
    <url>/jiangkeer-art.github.io/2021/11/06/%E5%B0%8F%E8%AF%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="随便写写的小说"><a href="#随便写写的小说" class="headerlink" title="随便写写的小说"></a>随便写写的小说</h1><h2 id="算是序言吧"><a href="#算是序言吧" class="headerlink" title="算是序言吧"></a>算是序言吧</h2><p>最近没什么想做的事情，所以来写写小说，严格来说要写的应该是剧本，但是我的水平感觉些什么都差不多，所以就叫什么应该都无所谓了（如果你想读的话最好不要有什么期望）。</p><span id="more"></span><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>今天天气很好，风和日丽，阳光透过窗户洒在我的床上。虽说今天的太阳是挺大的，但是阳光透过窗户洒在我的房间，也只能照亮房间的一部分，我的桌子所在的位置还是布满阴影，虽然也不是特别暗吧，但我还是喜欢把窗帘拉上。房间的窗帘是竹子做的那种，即使拉上也不至于让整个房间黑掉，总有些倔强的阳光会通过窗帘上的缝隙进入我的房间，而我就喜欢这样的阳光，它们义无反顾的进来，然后点亮我的房间，每次看到这样的景象，就会有一种难以言表的情绪，怎么说呢，有些消极，也有些温暖。</p><p>将窗帘拉上并且把门也关上之后，我要开始我的无意义之旅了。打开电脑，登陆企鹅，进入我的游戏群，直接就是一句@全体成员 上号！随后打开我的apex，开始等待好兄弟们上线。</p><p>我挺宅的，喜欢玩游戏，玩什么看心情，想玩什么就玩什么，虽然是挺没意义的吧，但是这毕竟是消磨时光的有效方式，每次我想要打发时间的时候就会玩游戏，也总比没事干强。</p><p>没过多久群友就来了，“喂喂喂，听得到吗？”，“可以”。我简单的回了一句，随后马上开始了游戏。</p><p>好久不玩机器人了，来一把。伴随着“快要听吐了”的背景音乐，我选出了我心爱的机器人，并且开始准备进入游戏里“大杀四方”。</p><p>“又玩机器人啊，你还真是不腻。”</p><p>“还行把，感觉别的角色也没啥好玩的。”</p><p>随后，我选择的机器人在我的眼中逐渐放大，逐渐大出了屏幕，随后一个虚空传送门出现在了我的面前，门的形状是个椭圆形，从边缘的浅蓝色到中心的黑色渐变，并且伴随着波浪般的律动和一些电流，随后门中伸出一只手，把我拉了进去。</p><p>“你就不能在之前提示我以下吗？”</p><p>尽管已经经历过了几次，但还是有点不适应，尤其是在虚空中的感觉，就像是有个压路机在碾你的身体一样，但是身体是悬空的，那种异样的感觉我到现在还是适应不了。</p><p>恶灵:“别叫，干活。”</p><p>当我第一次玩apex的时候，恶灵就出现了，毋庸置疑，大概可以用屁滚尿流来形容吧，我当时的反应。但是她可不管我什么反应，不管三七二十一直接就把我扔进了传送门里。</p><p>恢复意识的时候我躺在哈德曼实验室的传送门附近，在我身边的还有当时把我带入传送门的恶灵，她当时跟我聊了很多，这也是她说话最多的一次了，我已经记不清楚当时她说的是什么了，但是大概意思还是了解的，就是我要参加一个比赛，她没给我选择的机会，只说了会教我如何训练，也没有说我的队友是谁，也没说我是怎么来的，并且我也注意到我的身体有了一些变化，当我进入传送门之后，我的身体就会出现很多恶灵的身体特征，怎么说呢，变化还是很大的，以至于我一开始以为我变成恶灵的样子了，是的，如果想进入这个地方，所容纳自己意识的角色是要与游戏中的角色相差不大的，所以会出现这样的情况，简单来说就是我的身体不能适应这里的环境，恶灵就给我找了一个在这里用的身体，但是身体是怎么来的，我是怎么进入的，是不是有别人也和我有一样的经历，我都不知道。</p><p>经过了短暂的回忆，我开始做我不得不做的事情，训练，内容包括但不限于格斗，射击，虚空传送门的使用等等，每次训练要一整天，但是奇怪的是，当我回到我的房间时，时间才过去了2，3个小时，我问过恶灵，但是没得到答复。</p><p>训练结束后，我坐在地上看着天上的飞龙发呆。</p><p>“过两天，时间就到了。”</p><p>“啊,为什么这么快啊？”我将视线从飞龙转向恶灵。</p><p>“他们把时间提前了，是生是死，就看你自己了。”</p><p>这件事情很离谱，但是我也不敢问，因为就算是问了大概率也是没有什么回复的，要是真的要参加那个什么比赛，就只好听天由命了，毕竟恶灵这样的人都出现了，那再出现一些离谱的事情也不是不可能吧，想逃估计也是逃不走的。</p><p>“时间差不多了，走吧，下次就没有人来接你了。“</p><p>”为啥，下次就是参赛了吗？”</p><p>“是，到时候你就知道了。”</p><p>steam中的记录显示我游玩apex的时间已经有500多个小时了，但是实际上我的apex水平还处在走路都走不明白的水平，大部分时间都是被恶灵拉去做那些痛苦又枯燥的训练。虽然试过不玩apex，想着能逃过一劫，或者是说服自己看到的都是幻觉，但是就算是不玩，恶灵也会找上门来，然后冷冰冰地开始监督我训练。不过我也算是学会了怎么用传送门吧，虽然我只能在恶灵把我拉进来的这个空间里面使用传送门，但是我可以把传送门开到自己的房间里。</p><p>从传送门走出来后，我又坐在了电脑面前，带上耳机，屏幕显示现在时间时6点整，耳边传来开黑朋友的声音，“我要出门，先下了。”，“那我也下了，吃饭去了。”</p><p>未等我回复，老妈就将我的耳机摘了下来，“叫你咋听不见啊，快去外面买点鸡蛋回来，家里没鸡蛋了。”</p><p>“好好好，马上就去。”</p><p>我觉得我最近也有点像恶灵了，在沉默寡言方面。</p><p>简单的披上了一件羽绒服之后我就出门（对没错，穿着睡衣）去买鸡蛋，但是就在打开门的一瞬间，我仿佛是听到了电网被隔断的声音，手中的动作瞬间停了下来，随后通过门缝朝外观察。</p><p>并没有什么异常的情况发生，随后我又将门关上再打开，看看是不是自己听错了。</p><p>应该是听错了吧，最近训练的频率很高。</p><p>确认了刚才的声音是幻觉之后，我稍显发抖的身子也逐渐趋于稳定。</p><p>随后的这两天里，没再发生这样的事情，一切都挺正常的，至少在我眼中很正常吧。但是时间一点点流失，我也没有等到参赛的通知。</p><p>我躺在床上，思考着我会怎么参加比赛。</p><p>不是没有人来接我吗？那只能是我自己去参加，可是我也不知道什么时候去，去什么地方阿。</p><p>一阵坠落（zhui）的感觉将我的思绪拉了回来，随后眼中熟悉的天花板快速的缩小，我意识到自己进入传送门了。</p><p>不同的是，这次的传送门还能看到我房间内的景象，房间内的灯光可以透过传送门照到我的脸上。这不是恶灵和我平时用的传送门，但是现在来不及想这些了，身体传给我的感觉和不断缩小到和天空中的星星融为一体的传送门都在告诉我，我在下坠。</p>]]></content>
    
    
    <categories>
      
      <category>小说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小说</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIT6.S081 Lab1</title>
    <link href="/jiangkeer-art.github.io/2021/10/27/MIT6-S081Lab1/"/>
    <url>/jiangkeer-art.github.io/2021/10/27/MIT6-S081Lab1/</url>
    
    <content type="html"><![CDATA[<h1 id="MIT6-S081-Lab1实验代码"><a href="#MIT6-S081-Lab1实验代码" class="headerlink" title="MIT6.S081 Lab1实验代码"></a>MIT6.S081 Lab1实验代码</h1><h2 id="Sleep-Easy"><a href="#Sleep-Easy" class="headerlink" title="Sleep(Easy)"></a>Sleep(Easy)</h2><p>第一个实验的要求是实现sleep函数，函数放在user目录下。查看提示中说的程序例如echo.c，可以看到主函数有两个参数，分别为int型的argc和char*型的argv，这两个参数的作用是传递用户从命令行中输入的指令，argc为单词的个数，argv则是存储输入的命令。</p><span id="more"></span><p>提示中说明了可以使用artoi将char型转化为int型，并且给出了sleep的系统调用，所以实现起来就比较简单了。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &quot;kernel/types.h&quot;</span><br><span class="hljs-comment">#include &quot;kernel/stat.h&quot;</span><br><span class="hljs-comment">#include &quot;user/user.h&quot;</span><br><br>int<br>main(int argc, char *argv[])<br>&#123;<br><span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">2</span>)&#123;<br>fprintf(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;erro!\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>sleep(atoi(argv[<span class="hljs-number">1</span>]));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>因为sleep指令只需要两个字符，所以判断argc是不是2，如果不是就输出错误，并且退出程序，总体来说这个代码还是简单的。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">./grade-<span class="hljs-keyword">lab</span>-util <span class="hljs-keyword">sleep</span><br></code></pre></td></tr></table></figure><p>在项目目录下面输入上面的指令可以查看自己写的代码是不是过关了，在输入之前不要忘记在Makefile文件中添加自己的sleep，如何添加在提示中已经说明了。</p><p>下面是运行结果</p><p><img src="http://cnd.jiangkeer.icu/MITLab1-sleep.png"></p><h2 id="Pingpong-Easy"><a href="#Pingpong-Easy" class="headerlink" title="Pingpong(Easy)"></a>Pingpong(Easy)</h2><p>这个实验的要求是子进程向父进程发送一个字节，父进程收到之后打印规定的输出，然后父进程也向子进程发送一个字节，子进收到之后打印规定的输出，两个进程传输字节使用的是两个不同的管道，这个实验也不算难。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;user/user.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span></span><br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br><span class="hljs-keyword">int</span> p1[<span class="hljs-number">2</span>],p2[<span class="hljs-number">2</span>],pid;<br><span class="hljs-built_in">pipe</span>(p1);<br><span class="hljs-built_in">pipe</span>(p2);<br><span class="hljs-keyword">char</span> buf2[<span class="hljs-number">8</span>];<br><span class="hljs-keyword">while</span>((pid=fork())==<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">close</span>(p1[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">close</span>(p2[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">write</span>(p1[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">read</span>(p2[<span class="hljs-number">0</span>],buf2,<span class="hljs-number">8</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: received ping\n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">close</span>(p1[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">close</span>(p2[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">write</span>(p2[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">read</span>(p1[<span class="hljs-number">0</span>],buf2,<span class="hljs-number">8</span>);<br><span class="hljs-built_in">wait</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: received pong\n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>&#125;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里说明一下close的用法的，close可以将输入端和输出端关闭，close(p1[1])就是将写端关闭，这里有一点需要注意以下，close关闭的管道是在进程中关闭，close在哪个进程就关闭哪个进程的读端或写端，但是别的进程是不受影响。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./grade-lab-util</span> pingpong<br></code></pre></td></tr></table></figure><p>同样的，输入这段指令检查代码有没有问题。</p><p><img src="http://cnd.jiangkeer.icu/find.png" alt="avator"></p><h2 id="Primes-Moderate"><a href="#Primes-Moderate" class="headerlink" title="Primes(Moderate)"></a>Primes(Moderate)</h2><p>下面是利用管道来筛选素数，实验上说的算法简单来讲就是子进程读取父进程传来的数据，然后和自己的数字进行比较，如果能整除就说明不是素数，如果不能被整除就将他传递给子进程的子进程进行判断。</p><p>还有一点就是，子进程收到的第一个数字一定是一个素数，因为如果某个子进程是第一次收到数字的话，就证明这个数字通过了之前进程的验证，所以他一定是一个素数。</p><p>在当前进程收到第一个数字之后，就会把这个数字当成是自己的数字，然后接着接收别的进程发来的数字，并和自己的数字进行比较，如果不能被整除，就发送到下一个进程。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;user/user.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span></span><br><span class="hljs-function"><span class="hljs-title">createfork</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p[<span class="hljs-number">2</span>])</span></span>&#123;<br><span class="hljs-built_in">close</span>(p[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">int</span> pid,n2,n3;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">read</span>(p[<span class="hljs-number">0</span>],&amp;n2,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(n2)))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prime %d\n&quot;</span>,n2);<br><span class="hljs-keyword">int</span> p1[<span class="hljs-number">2</span>];<br><span class="hljs-built_in">pipe</span>(p1);<br>pid=fork();<br><span class="hljs-keyword">if</span>(pid&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">close</span>(p1[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">read</span>(p[<span class="hljs-number">0</span>],&amp;n3,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(n3)))&#123;<br><span class="hljs-keyword">if</span>(n3%n2!=<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">write</span>(p1[<span class="hljs-number">1</span>],&amp;n3,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(n3));<br>&#125;<br>&#125;<br><span class="hljs-built_in">close</span>(p1[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">wait</span>(<span class="hljs-number">0</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">close</span>(p[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">createfork</span>(p1);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span></span><br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">2</span>],pid,n1;<br><span class="hljs-built_in">pipe</span>(p);<br>pid=fork();<br><span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">createfork</span>(p);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">close</span>(p[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">for</span>(n1=<span class="hljs-number">2</span>;n1&lt;=<span class="hljs-number">35</span>;n1++)&#123;<br><span class="hljs-built_in">write</span>(p[<span class="hljs-number">1</span>],&amp;n1,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(n1));<br>&#125;<br><span class="hljs-built_in">close</span>(p[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">wait</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>因为在提示中说明了进程达到35的时候会导致xv6系统资源不足，所以在传输数字的时候只要传输35个就可以了，也就是1到35，并且要把用不到的管道及时关闭。</p><p>实现的方法采用的是递归实现，统一由父进程实现具体操作，子进程进行递归，代码的原理与一开始说的一样，这里不需要考虑读写的顺序，以及不同的子进程要读取几个数字，查看read的返回值就可以了，如果read读取成功了会返回1，所以可以把read放到判断条件里，这样如果read读取失败了就不会继续往下执行了。</p><h2 id="find-moderate"><a href="#find-moderate" class="headerlink" title="find(moderate)"></a>find(moderate)</h2><p>实验这里要让我们做一个简单的find指令，具体的操作让我们看user下的ls.c，那首先就要看懂ls.c的代码（实际上看不太懂没关系）。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/fs.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">char</span>*</span><br><span class="hljs-function"><span class="hljs-title">fmtname</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *path)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[DIRSIZ+<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">char</span> *p;<br><br>  <span class="hljs-comment">// Find first character after last slash.</span><br>  <span class="hljs-keyword">for</span>(p=path+<span class="hljs-built_in">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class="hljs-string">&#x27;/&#x27;</span>; p--)<br>    ;<br>  p++;<br><br>  <span class="hljs-comment">// Return blank-padded name.</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(p) &gt;= DIRSIZ)<br>    <span class="hljs-keyword">return</span> p;<br>  <span class="hljs-built_in">memmove</span>(buf, p, <span class="hljs-built_in">strlen</span>(p));<br>  <span class="hljs-built_in">memset</span>(buf+<span class="hljs-built_in">strlen</span>(p), <span class="hljs-string">&#x27; &#x27;</span>, DIRSIZ-<span class="hljs-built_in">strlen</span>(p));<br>  <span class="hljs-keyword">return</span> buf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span></span><br><span class="hljs-function"><span class="hljs-title">ls</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *path)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">512</span>], *p;<br>  <span class="hljs-keyword">int</span> fd;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> <span class="hljs-title">de</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><br>  <span class="hljs-keyword">if</span>((fd = <span class="hljs-built_in">open</span>(path, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;ls: cannot open %s\n&quot;</span>, path);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fstat</span>(fd, &amp;st) &lt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;ls: cannot stat %s\n&quot;</span>, path);<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(st.type)&#123;<br>  <span class="hljs-keyword">case</span> T_FILE:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %d %l\n&quot;</span>, <span class="hljs-built_in">fmtname</span>(path), st.type, st.ino, st.size);<br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-keyword">case</span> T_DIR:<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(path) + <span class="hljs-number">1</span> + DIRSIZ + <span class="hljs-number">1</span> &gt; <span class="hljs-keyword">sizeof</span> buf)&#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: path too long\n&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">strcpy</span>(buf, path);<br>    p = buf+<span class="hljs-built_in">strlen</span>(buf);<br>    *p++ = <span class="hljs-string">&#x27;/&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">read</span>(fd, &amp;de, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(de)) == <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(de))&#123;<br>      <span class="hljs-keyword">if</span>(de.inum == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-built_in">memmove</span>(p, de.name, DIRSIZ);<br>      p[DIRSIZ] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">stat</span>(buf, &amp;st) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: cannot stat %s\n&quot;</span>, buf);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %d %d\n&quot;</span>, <span class="hljs-built_in">fmtname</span>(buf), st.type, st.ino, st.size);<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-built_in">close</span>(fd);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span></span><br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> i;<br><br>  <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-built_in">ls</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;argc; i++)<br>    <span class="hljs-built_in">ls</span>(argv[i]);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是ls.c的内容，从main开始看，首先是判断输入指令的长度，如果是1的话就将当前目录的内容全部输出，如果不是1的话就进行查找对比，随后进入ls函数，ls函数开始的一堆东西不用管，只需要看switch的两个分枝，这里switch的作用是将文件和文件夹进行区分，这也是我们要的，如果st.type是T_FILE的话就证明是一个文件，将他和我们输入的字符串进行比较，如果相匹配的话就输出（但是ls这里是直接将文件名和各种信息输出了），然后我们看T_DIR部分，虽然这部分有些难看懂，但是实际上我们只需要找到ls输出内容的地方就可以了，直接将printf修改为递归，递归的参数中path已经被拷贝到了buf中，所以参数值写buf和file，让他去递归寻找我们的file，剩下的就是写一个比较函数了。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/fs.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span></span><br><span class="hljs-function"><span class="hljs-title">contest</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* path,<span class="hljs-keyword">char</span>* file)</span></span>&#123;<br><span class="hljs-keyword">char</span> *p,*f;<br>f=file;<br><span class="hljs-keyword">for</span>(p=path+<span class="hljs-built_in">strlen</span>(path);p&gt;=path&amp;&amp;*p!=<span class="hljs-string">&#x27;/&#x27;</span>;p--)<br>;<br>p++;<br><span class="hljs-keyword">for</span>(;*p!=<span class="hljs-number">0</span>&amp;&amp;*f!=<span class="hljs-number">0</span>;p++,f++)&#123;<br><span class="hljs-keyword">if</span>(*p!=*f)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(*p!=<span class="hljs-number">0</span>||*f!=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span></span><br><span class="hljs-function"><span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* path,<span class="hljs-keyword">char</span>* file)</span></span>&#123;<br><span class="hljs-keyword">int</span> fd;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">512</span>],*p;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> <span class="hljs-title">de</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><span class="hljs-keyword">if</span>((fd=<span class="hljs-built_in">open</span>(path,<span class="hljs-number">0</span>))&lt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;find:cannot open %s\n&quot;</span>,path);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">fstat</span>(fd,&amp;st)&lt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;find:cannot stat %s\n&quot;</span>,path);<br><span class="hljs-built_in">close</span>(fd);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(st.type)&#123;<br><span class="hljs-keyword">case</span> T_FILE:<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">contest</span>(path,file)==<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,path);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> T_DIR:<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(path)+<span class="hljs-number">1</span>+DIRSIZ+<span class="hljs-number">1</span>&gt;<span class="hljs-keyword">sizeof</span> buf)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;find:path too long\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">strcpy</span>(buf,path);<br>p=buf+<span class="hljs-built_in">strlen</span>(buf);<br>*p++=<span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">read</span>(fd,&amp;de,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(de))==<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(de))&#123;<br><span class="hljs-keyword">if</span>(de.inum==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(de.name,<span class="hljs-string">&quot;.&quot;</span>)==<span class="hljs-number">0</span>||<span class="hljs-built_in">strcmp</span>(de.name,<span class="hljs-string">&quot;..&quot;</span>)==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">memmove</span>(p,de.name,DIRSIZ);<br>p[DIRSIZ]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">find</span>(buf,file);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">close</span>(fd);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span></span><br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br><span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">3</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;erro!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">find</span>(argv[<span class="hljs-number">1</span>],argv[<span class="hljs-number">2</span>]);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>contest函数是用来比较当前文件和要寻找的文件是否一致的，如果一致的话就返回0，不一致就返回1，然后我们再来看ls中的fmtname函数，在函数的第一个for循环中有一条注释，翻译过来就是“找到最后一个斜杠后的第一个字符”，经过了这个for循环之后p就会指向第一个字符，而f也指向第一个字符，到了这里，p就变成了读取的列表中的文件名，f就变成了我们要找的文件名，所以再写一个for循环将他们一一进行对比，如果发现不一致的地方就返回1，如果for结束了还没有返回，就检查一下是不是两个指针都指向了最后，如果有一个没有指向最后，那就证明还是不匹配，接着返回1，如果都指向了最后，就说明两个是匹配的，返回0。</p><p>在实验中提到了strcmp函数，但是这个函数在比较buf和f时并不会输出0，我现在暂且不知为何，所以改了改代码直接一个一个的比较了。</p><p><img src="http://cnd.jiangkeer.icu/pingpong.png" alt="avator"></p><h2 id="Xargs-moderate"><a href="#Xargs-moderate" class="headerlink" title="Xargs(moderate)"></a>Xargs(moderate)</h2><p>这次实验要求我们复现xargs指令，这个指令的大致作用是在管道中，将输入的部分放到自己的后面执行，大致例子可以在实验中看到，当输入echo hello|xargs echo bye的时候，会先输出bye再输出hello。</p><p>首先要知道一件事，就是xargs是用在管道的读端的，而上一条指令的结果是会写入管道的，所以我们可以直接read出上一条指令，并且再将指令拼接的自己的argv中，随后再将拼接好的字符串传到exec中执行，就实现了一个简易的xargs指令。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &quot;kernel/types.h&quot;</span><br><span class="hljs-comment">#include &quot;user/user.h&quot;</span><br><span class="hljs-comment">#include &quot;kernel/param.h&quot;</span><br><span class="hljs-comment">#include &quot;kernel/stat.h&quot;</span><br><br>int<br>main(int argc,char* argv[])&#123;<br>char buf[<span class="hljs-number">32</span>];<br>int n;<br><span class="hljs-keyword">if</span>(argc&lt;<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">while</span>((n=read(<span class="hljs-number">0</span>,buf,sizeof buf))&gt;<span class="hljs-number">0</span>)&#123;<br>write(<span class="hljs-number">1</span>,buf,n);<br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>char* argvv[MAXARG];<br>int argcc=argc-<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">1</span>;i&lt;argc;++i)&#123;<br>argvv[i-<span class="hljs-number">1</span>]=argv[i];<br>&#125;<br>char *p=buf;<br><span class="hljs-keyword">while</span>((n=read(<span class="hljs-number">0</span>,p,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(*p==<span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<br>*p=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(fork()==<span class="hljs-number">0</span>)&#123;<br>argvv[argcc]=buf;<br>exec(argvv[<span class="hljs-number">0</span>],argvv);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>wait(<span class="hljs-number">0</span>);<br>&#125;<br>p=buf;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>p++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里读取字符串是通过while来进行的，每次只读一个字节，当读取到\n时就证明读完了一个结果，随后进行字符串的拼接，之后放到exec函数中去执行，因为判断条件是*p==\n所以要将\n去掉，所以这里将\n变成了结束符号0，p=buf是将p指向buf的头，之后读的时候新的结果就会将老的结果覆盖掉。</p>]]></content>
    
    
    <categories>
      
      <category>MIT实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MIT</tag>
      
      <tag>操作系统</tag>
      
      <tag>编成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>testpost</title>
    <link href="/jiangkeer-art.github.io/2021/10/27/testpost/"/>
    <url>/jiangkeer-art.github.io/2021/10/27/testpost/</url>
    
    <content type="html"><![CDATA[<p>测试文章发布</p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
      <tag>test2</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
