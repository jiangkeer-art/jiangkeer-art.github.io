<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/jiangkeer-art.github.io/2022/04/13/hello-world/"/>
      <url>/jiangkeer-art.github.io/2022/04/13/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="90254da5a5342d0046d57035c530f45d2847b4e3e89897078067504dfba98307">4630436162ade97ba2718b7d0c4b3b63f97fe7f487088031e1ec7f30c37889e17af4f6297068ec459b8609dd5e773f884c55009995b4e2fa14cd0ad5eff0ada9f9fb8fb348a39322f64a27b4e67198e9d0918355853825b4a8b859e1b0997d0838db13d93eb663a75abf26151a4cd6693bc3399e41eef6d4a0d8ac518bee9c9ddee4d733ecfde4f1c7c01610b2139c3f919d321e3580e4ea4d25333a1eb6a757138158c91746eb650d2bd292b639e6c34cbf144f87d98390fac9f8662146f06c3a6438c2b9ee94e1d311e783b3870047c72629be8369de61aafcfd95d1a6b146908a00176e823191858046b0d3068b0efa543f002c4411ac17d84cfbc5419db7d33e0dec60d5febc26877845ea4a0c78edbec57ec484cb94f4a5981b779247299a083552613550cf2067f03e18806e1d8b7363322598e505c747f93d1e38576db45e8de5d1770b452a4fb1219a730e7968e9f6fbb48dd64088b4f6b768d41ae0fde1188c840a5b26f4bcf87fc459371861bccf009fd56466bfb6189998e9e6a70ba3621ca8bdf949e5cadcc118f51f127a91581910ae3b260b6d0fb0cee64121e5e66307f456c243225aa77a3858e9e6baa0bb6fbec7f066233f796299f0fa9e1fe0c4cc9ecdec835fb5c680519cf717ac37ce80351440030539e97a6025d7df8e5b9a38723d5752f0ba629da523bce1492683233e54ea7bccc05c30fd1e719e3d4446e3e90d37e5efc5da7c1a69677526d22a4268c0d2fa84c84561baa88f1b18d2da0af845e9d31981b1afbab7c627f5c655920720785ccba4ec1fefd5bff10d3ee24d78294b4024ea671925ae671a96c138892d3028d582b52befb65a7291084ac08968fe9a27f2d47d5549f0c62d804621cf01a0437f0ec0dfb636c0d27ae16f3b454e50afa12d8c950f353746b3d986832a1a0ffebca1670c0207c686d6d81e6cf29af66f5b2b393cf14caf4feb4c1a355ff73baa87a1b99f3247b76a3d643113df8f7ee201a7651659b487b9d9a4b56c91fcc1314240844f1d3ef15ad0004fa48fb51560364314c6b3aa2ec29c11e90eeee4db050621ee006d9b554de8c20897cb11233fbf29c13b939859000f662b3d6910ee296f0da3a7150ec35412943e33fe652fbaef14acce0629ca13f8761b5832be5d7ef07b8da5f59e1f25c208b7eabab73cb4bec4a5c69b84d2eca4ba76e2060c1ec479d99881f9a2104bef83c0e59b0eb7b6d50e90932ad4126c7e3e59dd8a372a7aa66eed8dfbef0661cbf7ca07f7b35419ccc1f8254b21a69b0f3aed61262ed112a7291ef8d69622e295045ea72eb1adf59e09ef03ae3004e14abfba9e2ab5190809f6fca6322247236ab6114a658172efe65d315e470253c69a5adf5ce4dc2259ec8a5cabc8fce7f4693fa255ac25b73f31df2845edfafd5a9d5ac3b3858bfe45dfb707ee7125354116ef6512f788558b2e331ff29a65ba60c098cc889a43ee4196984a365cb16c67e7a638e6abd77a28e70b1ef0329666697abc4fb9f8962b4b17f5056992d136f38b20d29bfac5f03efa5dc0a2fd1270b805722feffdc95ae9a566c4be549b60b3283d242e0d2f94f495a1a1e3941e125307259fd5d2efa045e775e08815f060b02a2800b294d4cd9705a2b4b3a1ec098487816445e7d290db42e75d16a63ab599aa7c2a9227a4ce258da54ac07694314402143ed065e8e4944e0c641eb9bf2b6500801d54b8c2d0ad28b5bbc887e4744a63cd26cccd48a209bab2cebb4b7d5c95a6aa94b7e85d3f0c13f8870b55d9efe3b53cd81d2ea30776232b07bbeb2969953c07a7b3e8bee77856885602451501436a1e75d0badbd849690fece40a1a63d99087a0c1e300d88569295703fc55b6e7ccf884931cddb12a2832972983febcbfc82899c884c2f8f433ad52e44182e4873b67f08c50985d98b0a609ff143bfee095c7f8cecf32604440ec3cbd3b4bc648aa24651f2e5f438dc67960a0ad28d718ee49f08d7f8b99e30aa7dd3bf8f23d279a4f1c7bea7bb65d12aa2bde966e48c98970ab3d224b8a8cd5a99b36bd1c86c6bf8ad22ad74371bd8c597c066e3165e5f278cf3ada999cca48d22fd0abc5d04314ff2d95395c487003a65ba1cb4b03c6cafc509de71c9b1c1fb4d4900b593442d4487dd309c3e9dbcd03b30c70ecbfb1acc9f1e34f7be53d1abcb64695ce7405e73581e1897d29a98f4456b17c341d0ab284cbb7405507ca4d0a36608a96f821201511625bb39a2356462dd0239540701e2e5fc87759da293fefa5e43e5d9be8493c39cf9f420d47da47d49ea06b111ede90039ac1a3e456fa83e826ee4ffbf3fe07bf056993e399ecdfdb8f06bde50cb4053026ba0ef957b412bc91ed02d512d23783834122787db7521ae8379ac333df0974e0bd7482b53adc5d1cafd0e49a987ffa713bc91ff633a5016b1d5d2d69da48ccb62f3a8d2d411c17a8368f86086014510c209bdf6c6f7c586a070600cbf6b1b8862c4bc5bde060777c4f100be69bacf09ae18eac9315e6bc25550eb67a3fe03b6f1e293450573155ccd44da054f0800343aee9405aaa95c1abe41be091f1bd5715772c305e28a98666356db6e6a2085e6f9e680bdba250bc9dbf34866a457c84c9e32ea4d7506e61d3f6b301c2d6f54621e2b382e992640bdd4c2c7724db942816837d8975ef1b0953f6b87932555316fff11a285d9795c8155ba428dd35099433f3f8883ad715178524c10eff2e907a7475658dc32cd58e44fcd79c8ce86c7dadbc4daf847ce49ac1b581a1ac635a2850ab5d63131429c63163a714368738dbbc22ca3adda33125342af10ea489d0d88f170495917426ea63a5a8c0be4b5f498c6872c0a2f3508a025ea7ab5441d3ff6fbecc630c826393c80f362ff61d68a91806036db2de8ffaa778ac03ad57d46b5920b2f70949cf1d134fedb5538037a5c694853786d7545071268ac5e2c79f325bb4c6c0ead8f338ffe313beadb3153c3caac3c79b8569b961eaf985ec0fbc93615ac866f21893ccd7892ec12822fb1e08e7df223c44aa4b761f1290f5c57f1b676f7308ea623e89156406bbeb4a84ba810c2fba93b08d728b8cd1368e9495f2b65f4d048a5500eaab38061d9fd5aaffb54f072c9c847b581026e33e22f809fcc0c2d5a6f090afb341ee129dc7ce81a9021a123c44d71a13d10652a6df12</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/jiangkeer-art.github.io/lib/hbe.js"></script><link href="/jiangkeer-art.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 作为日记加密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> hello-world </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小说大纲？</title>
      <link href="/jiangkeer-art.github.io/2022/01/05/%E5%B0%8F%E8%AF%B4%E5%A4%A7%E7%BA%B2%EF%BC%9F/"/>
      <url>/jiangkeer-art.github.io/2022/01/05/%E5%B0%8F%E8%AF%B4%E5%A4%A7%E7%BA%B2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a9eb808f8e96cf37b89d4647ff76a3b087b5367d7b6f4b9f87490eb19e47b321">0a6004fcdf23cb0ca239960f852ab09ac32834941464499ae8394dda3f1c4ff21437822930f02aae61247f65b7fe0637a82f70ec87264b6e1730c287c95c0f4bf0f236b34c2732e9787d8c3f61f3cd80365dd9832c172c4ecd000a93bb1dabe72de429a1c764edbf0f07396a94042bd80b9b37fde3debb644b5d95d0eaa4233f16032b8eaf50cd3d0b7c8d7c99f0712d03988d3c99a7faf1f7415b92eb6a9181efca87f851b260b609196bcc65b4fb22ec3a1bce93a6739f53f19aa847daf70bf7877cc4ae546963dd30e6c118c615c226d7bfd54fb44fc15836bf39f1a41ffbafcf77f24bddea10145272f0ed3af9ae6b375292f50e9c487ed9bba51e81e58a03d69d0f687c0d02591ea69443f78318d582a85e685055ae681347f45c2ed9d31da63991d72d01c0983171b54994a036e66b19b644dddeef891fd4df347dd688ba78bad53f522bfa9c5c2729e6821be3cb299cf9859f30581d9daf129508af027b3fef0fb8e0386f545df2d7c104052960e002d212f3ae5ee52709efdaafb88856d13c26b172a5778881052d0cadc23ef944f6d1c4ee97088bb878c532bb71661bd69b6509dd186a760ff9acf8fe093d003c76eb29de87727b865afc9676bad6327bd95a818ef7fa6c79df83d00c27cef9c382170dc4bfc3f48e99914248957a6423d89fa83dc72762e9e643e32e5010fc38ec3f43089f7bc9f3a826d0962d2e5fb20701a7efbd1e7a5fd6f249a78610526d446c903e007fccdeebdf334626e1273ef1ba6c1378859ae9f82addccf6020c9ef4aad8aba0a870d331a14906b653329480412bdfe503795d101908dc7642583f0b7e249a801911d0f7697f0f27d2ba5ce894576062d027104ea891c7b57c9fc12efb3724bf508a37ffd7cf1eec38cdbafff2fb183e332e03b499b39534a84cfeee390052befebd232b5434a23cae3470fa1fb95fd734b449f3419e7d185c576f07b1f7b521fe1f06385f84b13b8acfaed693bb7e9465242d6d735111dcc314f29888551cbddf93270152921be851cd7fa23443d97eda0d3bd8f7eb31bbbc24ca8f051de7c3293b83b51b5ac748bd2d0ed8d69d3728ba13af96277c569c766e8059e99411c7bf024fb83a9266d4c5338671b88d749fadcc7265a372324ee227781991adf9c5e81f39b635fd6cdea648f8800bc6bacfd1780af81de2008504d32c8d873d864cd9ca86a0578b1b5e0c99b789d22539be290abdc1f59bc5c09cb32c1c9e564b0d86150524eeff387a6baa0e132b52b982c3514382077437bbf9184978a78b04975b3c38729066898798df081ce12422919bdf7c10ad42ede7948a88a691bd6d45df2755ec4d855979b57e0f02e07ca1188d1d54e69dece4bac6ee60ab6260a3e980d41343ff6bc1ff6b644273b4f4f52aef6700bc5e4c5d7afd91110525a1f2ea317d191bd062b24931af192630ebe84179bac2020fc90270f79f2c2fad1b00770d38b849c20efc63067c18fd51d647e797fe2eb3539526e33413b79cea84ef8c2c58cc98d89ac6264b715aa2ee59cece3166c2a307b1f44e0037e189f8e13a8af66acd182b66d5f3f159c9fa6f8e5072d08bbd553a05446c6052782ab5098a091d69159b9d4315f9e0ea436073b75e5d755220b2fe3ca5e60e38685f6976c2f1c14cc1f98f91dd7b26990b65974a3ea655e198ab407f1559f8b1b53245cb9325de68bba78e06359f36773508d207ed75fab9b62ae1d032a2604860ccd4c3d60288345372b90171c82b76e7758cbf0b309065d76e1ea0d0479fd5ae7d0216441351b5f66f829ef607c0aaa775feaa609e2160ce2fffb90a78b4f840146df3b4a8b83dfb59fdc2f7823897fcc6adcb46fea65fb3d0feb97da8acee76b499fe15fc3be0a2d52acc51488437c68de543f62c6cef12324377b72c5b080528dc0e0a370f0569e68e3aa70fc633c3ddd549d7c95d7e060eaa0be5ae09bc9bc714d0c7a0dcae2ff7330e2730053a48ef138462a850ddd2ed0575d7afc4a320d24d810ff916cb63c4b0309b5ba191e3779aea1d91e69139603d4e43aa0ed64678e252a012761430c7ff70adb0336d0ec010da7d1b88e35062f567e57a0fd103b5b69db16eff5e8c90526c14f228a3ba8a568f50818b78d673cda4d2e25733d4c212bb5f7d462cbe0e9fd34016d8a25e56de09266e688cb51fe1f364111da87bf0ba91ea839f1595404bcc57a1b7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/jiangkeer-art.github.io/lib/hbe.js"></script><link href="/jiangkeer-art.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 小说 </category>
          
          <category> 作为日记加密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
            <tag> 大纲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小说2</title>
      <link href="/jiangkeer-art.github.io/2022/01/05/%E5%B0%8F%E8%AF%B42/"/>
      <url>/jiangkeer-art.github.io/2022/01/05/%E5%B0%8F%E8%AF%B42/</url>
      
        <content type="html"><![CDATA[<h2 id="序言2"><a href="#序言2" class="headerlink" title="序言2"></a>序言2</h2><p>这章应该会正式确定出比赛内容，也就是之后最主要要讲的事情，但是具体是什么，我自己也不清楚。XD</p><span id="more"></span><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2>]]></content>
      
      
      <categories>
          
          <category> 小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小说</title>
      <link href="/jiangkeer-art.github.io/2021/11/06/%E5%B0%8F%E8%AF%B4/"/>
      <url>/jiangkeer-art.github.io/2021/11/06/%E5%B0%8F%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="随便写写的小说"><a href="#随便写写的小说" class="headerlink" title="随便写写的小说"></a>随便写写的小说</h1><h2 id="算是序言吧"><a href="#算是序言吧" class="headerlink" title="算是序言吧"></a>算是序言吧</h2><p>最近没什么想做的事情，所以来写写小说，严格来说要写的应该是剧本，但是我的水平感觉些什么都差不多，所以就叫什么应该都无所谓了（如果你想读的话最好不要有什么期望）。</p><span id="more"></span><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>今天天气很好，风和日丽，阳光透过窗户洒在我的床上。虽说今天的太阳是挺大的，但是阳光透过窗户洒在我的房间，也只能照亮房间的一部分，我的桌子所在的位置还是布满阴影，虽然也不是特别暗吧，但我还是喜欢把窗帘拉上。房间的窗帘是竹子做的那种，即使拉上也不至于让整个房间黑掉，总有些倔强的阳光会通过窗帘上的缝隙进入我的房间，而我就喜欢这样的阳光，它们义无反顾的进来，然后点亮我的房间，每次看到这样的景象，就会有一种难以言表的情绪，怎么说呢，有些消极，也有些温暖。</p><p>将窗帘拉上并且把门也关上之后，我要开始我的无意义之旅了。打开电脑，登陆企鹅，进入我的游戏群，直接就是一句@全体成员 上号！随后打开我的apex，开始等待好兄弟们上线。</p><p>我挺宅的，喜欢玩游戏，玩什么看心情，想玩什么就玩什么，虽然是挺没意义的吧，但是这毕竟是消磨时光的有效方式，每次我想要打发时间的时候就会玩游戏，也总比没事干强。</p><p>没过多久群友就来了，“喂喂喂，听得到吗？”，“可以”。我简单的回了一句，随后马上开始了游戏。</p><p>好久不玩机器人了，来一把。伴随着“快要听吐了”的背景音乐，我选出了我心爱的机器人，并且开始准备进入游戏里“大杀四方”。</p><p>“又玩机器人啊，你还真是不腻。”</p><p>“还行把，感觉别的角色也没啥好玩的。”</p><p>随后，我选择的机器人在我的眼中逐渐放大，逐渐大出了屏幕，随后一个虚空传送门出现在了我的面前，门的形状是个椭圆形，从边缘的浅蓝色到中心的黑色渐变，并且伴随着波浪般的律动和一些电流，随后门中伸出一只手，把我拉了进去。</p><p>“你就不能在之前提示我以下吗？”</p><p>尽管已经经历过了几次，但还是有点不适应，尤其是在虚空中的感觉，就像是有个压路机在碾你的身体一样，但是身体是悬空的，那种异样的感觉我到现在还是适应不了。</p><p>恶灵:“别叫，干活。”</p><p>当我第一次玩apex的时候，恶灵就出现了，毋庸置疑，大概可以用屁滚尿流来形容吧，我当时的反应。但是她可不管我什么反应，不管三七二十一直接就把我扔进了传送门里。</p><p>恢复意识的时候我躺在哈德曼实验室的传送门附近，在我身边的还有当时把我带入传送门的恶灵，她当时跟我聊了很多，这也是她说话最多的一次了，我已经记不清楚当时她说的是什么了，但是大概意思还是了解的，就是我要参加一个比赛，她没给我选择的机会，只说了会教我如何训练，也没有说我的队友是谁，也没说我是怎么来的，并且我也注意到我的身体有了一些变化，当我进入传送门之后，我的身体就会出现很多恶灵的身体特征，怎么说呢，变化还是很大的，以至于我一开始以为我变成恶灵的样子了，是的，如果想进入这个地方，所容纳自己意识的角色是要与游戏中的角色相差不大的，所以会出现这样的情况，简单来说就是我的身体不能适应这里的环境，恶灵就给我找了一个在这里用的身体，但是身体是怎么来的，我是怎么进入的，是不是有别人也和我有一样的经历，我都不知道。</p><p>经过了短暂的回忆，我开始做我不得不做的事情，训练，内容包括但不限于格斗，射击，虚空传送门的使用等等，每次训练要一整天，但是奇怪的是，当我回到我的房间时，时间才过去了2，3个小时，我问过恶灵，但是没得到答复。</p><p>训练结束后，我坐在地上看着天上的飞龙发呆。</p><p>“过两天，时间就到了。”</p><p>“啊,为什么这么快啊？”我将视线从飞龙转向恶灵。</p><p>“他们把时间提前了，是生是死，就看你自己了。”</p><p>这件事情很离谱，但是我也不敢问，因为就算是问了大概率也是没有什么回复的，要是真的要参加那个什么比赛，就只好听天由命了，毕竟恶灵这样的人都出现了，那再出现一些离谱的事情也不是不可能吧，想逃估计也是逃不走的。</p><p>“时间差不多了，走吧，下次就没有人来接你了。“</p><p>”为啥，下次就是参赛了吗？”</p><p>“是，到时候你就知道了。”</p><p>steam中的记录显示我游玩apex的时间已经有500多个小时了，但是实际上我的apex水平还处在走路都走不明白的水平，大部分时间都是被恶灵拉去做那些痛苦又枯燥的训练。虽然试过不玩apex，想着能逃过一劫，或者是说服自己看到的都是幻觉，但是就算是不玩，恶灵也会找上门来，然后冷冰冰地开始监督我训练。不过我也算是学会了怎么用传送门吧，虽然我只能在恶灵把我拉进来的这个空间里面使用传送门，但是我可以把传送门开到自己的房间里。</p><p>从传送门走出来后，我又坐在了电脑面前，带上耳机，屏幕显示现在时间时6点整，耳边传来开黑朋友的声音，“我要出门，先下了。”，“那我也下了，吃饭去了。”</p><p>未等我回复，老妈就将我的耳机摘了下来，“叫你咋听不见啊，快去外面买点鸡蛋回来，家里没鸡蛋了。”</p><p>“好好好，马上就去。”</p><p>我觉得我最近也有点像恶灵了，在沉默寡言方面。</p><p>简单的披上了一件羽绒服之后我就出门（对没错，穿着睡衣）去买鸡蛋，但是就在打开门的一瞬间，我仿佛是听到了电网被隔断的声音，手中的动作瞬间停了下来，随后通过门缝朝外观察。</p><p>并没有什么异常的情况发生，随后我又将门关上再打开，看看是不是自己听错了。</p><p>应该是听错了吧，最近训练的频率很高。</p><p>确认了刚才的声音是幻觉之后，我稍显发抖的身子也逐渐趋于稳定。</p><p>随后的这两天里，没再发生这样的事情，一切都挺正常的，至少在我眼中很正常吧。但是时间一点点流失，我也没有等到参赛的通知。</p><p>我躺在床上，思考着我会怎么参加比赛。</p><p>不是没有人来接我吗？那只能是我自己去参加，可是我也不知道什么时候去，去什么地方阿。</p><p>一阵坠落（zhui）的感觉将我的思绪拉了回来，随后眼中熟悉的天花板快速的缩小，我意识到自己进入传送门了。</p><p>不同的是，这次的传送门还能看到我房间内的景象，房间内的灯光可以透过传送门照到我的脸上。这不是恶灵和我平时用的传送门，但是现在来不及想这些了，身体传给我的感觉和不断缩小到和天空中的星星融为一体的传送门都在告诉我，我在下坠。</p>]]></content>
      
      
      <categories>
          
          <category> 小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.S081 Lab1</title>
      <link href="/jiangkeer-art.github.io/2021/10/27/MIT6-S081Lab1/"/>
      <url>/jiangkeer-art.github.io/2021/10/27/MIT6-S081Lab1/</url>
      
        <content type="html"><![CDATA[<h1 id="MIT6-S081-Lab1实验代码"><a href="#MIT6-S081-Lab1实验代码" class="headerlink" title="MIT6.S081 Lab1实验代码"></a>MIT6.S081 Lab1实验代码</h1><h2 id="Sleep-Easy"><a href="#Sleep-Easy" class="headerlink" title="Sleep(Easy)"></a>Sleep(Easy)</h2><p>第一个实验的要求是实现sleep函数，函数放在user目录下。查看提示中说的程序例如echo.c，可以看到主函数有两个参数，分别为int型的argc和char*型的argv，这两个参数的作用是传递用户从命令行中输入的指令，argc为单词的个数，argv则是存储输入的命令。</p><span id="more"></span><p>提示中说明了可以使用artoi将char型转化为int型，并且给出了sleep的系统调用，所以实现起来就比较简单了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">if(argc!=2)&#123;</span><br><span class="line">fprintf(2,&quot;erro!\n&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">sleep(atoi(argv[1]));</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为sleep指令只需要两个字符，所以判断argc是不是2，如果不是就输出错误，并且退出程序，总体来说这个代码还是简单的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./grade-lab-util sleep</span><br></pre></td></tr></table></figure><p>在项目目录下面输入上面的指令可以查看自己写的代码是不是过关了，在输入之前不要忘记在Makefile文件中添加自己的sleep，如何添加在提示中已经说明了。</p><p>下面是运行结果</p><p><img src="http://cnd.jiangkeer.icu/MITLab1-sleep.png"></p><h2 id="Pingpong-Easy"><a href="#Pingpong-Easy" class="headerlink" title="Pingpong(Easy)"></a>Pingpong(Easy)</h2><p>这个实验的要求是子进程向父进程发送一个字节，父进程收到之后打印规定的输出，然后父进程也向子进程发送一个字节，子进收到之后打印规定的输出，两个进程传输字节使用的是两个不同的管道，这个实验也不算难。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main(int argc, char *argv[])&#123;</span><br><span class="line">int p1[2],p2[2],pid;</span><br><span class="line">pipe(p1);</span><br><span class="line">pipe(p2);</span><br><span class="line">char buf2[8];</span><br><span class="line">while((pid=fork())==-1);</span><br><span class="line">if(pid==0)&#123;</span><br><span class="line">close(p1[0]);</span><br><span class="line">close(p2[1]);</span><br><span class="line">write(p1[1],&quot;a&quot;,1);</span><br><span class="line">read(p2[0],buf2,8);</span><br><span class="line">printf(&quot;%d: received ping\n&quot;,getpid());</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">close(p1[1]);</span><br><span class="line">close(p2[0]);</span><br><span class="line">write(p2[1],&quot;b&quot;,1);</span><br><span class="line">read(p1[0],buf2,8);</span><br><span class="line">wait(0);</span><br><span class="line">printf(&quot;%d: received pong\n&quot;,getpid());</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里说明一下close的用法的，close可以将输入端和输出端关闭，close(p1[1])就是将写端关闭，这里有一点需要注意以下，close关闭的管道是在进程中关闭，close在哪个进程就关闭哪个进程的读端或写端，但是别的进程是不受影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./grade-lab-util pingpong</span><br></pre></td></tr></table></figure><p>同样的，输入这段指令检查代码有没有问题。</p><p><img src="http://cnd.jiangkeer.icu/find.png" alt="avator"></p><h2 id="Primes-Moderate"><a href="#Primes-Moderate" class="headerlink" title="Primes(Moderate)"></a>Primes(Moderate)</h2><p>下面是利用管道来筛选素数，实验上说的算法简单来讲就是子进程读取父进程传来的数据，然后和自己的数字进行比较，如果能整除就说明不是素数，如果不能被整除就将他传递给子进程的子进程进行判断。</p><p>还有一点就是，子进程收到的第一个数字一定是一个素数，因为如果某个子进程是第一次收到数字的话，就证明这个数字通过了之前进程的验证，所以他一定是一个素数。</p><p>在当前进程收到第一个数字之后，就会把这个数字当成是自己的数字，然后接着接收别的进程发来的数字，并和自己的数字进行比较，如果不能被整除，就发送到下一个进程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">createfork(int p[2])&#123;</span><br><span class="line">close(p[1]);</span><br><span class="line">int pid,n2,n3;</span><br><span class="line">if(read(p[0],&amp;n2,sizeof(n2)))&#123;</span><br><span class="line">printf(&quot;prime %d\n&quot;,n2);</span><br><span class="line">int p1[2];</span><br><span class="line">pipe(p1);</span><br><span class="line">pid=fork();</span><br><span class="line">if(pid&gt;0)&#123;</span><br><span class="line">close(p1[0]);</span><br><span class="line">while(read(p[0],&amp;n3,sizeof(n3)))&#123;</span><br><span class="line">if(n3%n2!=0)&#123;</span><br><span class="line">write(p1[1],&amp;n3,sizeof(n3));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">close(p1[1]);</span><br><span class="line">wait(0);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">close(p[0]);</span><br><span class="line">createfork(p1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main(int argc,char *argv[])&#123;</span><br><span class="line">int p[2],pid,n1;</span><br><span class="line">pipe(p);</span><br><span class="line">pid=fork();</span><br><span class="line">if(pid==0)&#123;</span><br><span class="line">createfork(p);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">close(p[0]);</span><br><span class="line">for(n1=2;n1&lt;=35;n1++)&#123;</span><br><span class="line">write(p[1],&amp;n1,sizeof(n1));</span><br><span class="line">&#125;</span><br><span class="line">close(p[1]);</span><br><span class="line">wait(0);</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在提示中说明了进程达到35的时候会导致xv6系统资源不足，所以在传输数字的时候只要传输35个就可以了，也就是1到35，并且要把用不到的管道及时关闭。</p><p>实现的方法采用的是递归实现，统一由父进程实现具体操作，子进程进行递归，代码的原理与一开始说的一样，这里不需要考虑读写的顺序，以及不同的子进程要读取几个数字，查看read的返回值就可以了，如果read读取成功了会返回1，所以可以把read放到判断条件里，这样如果read读取失败了就不会继续往下执行了。</p><h2 id="find-moderate"><a href="#find-moderate" class="headerlink" title="find(moderate)"></a>find(moderate)</h2><p>实验这里要让我们做一个简单的find指令，具体的操作让我们看user下的ls.c，那首先就要看懂ls.c的代码（实际上看不太懂没关系）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line">#include &quot;kernel/fs.h&quot;</span><br><span class="line"></span><br><span class="line">char*</span><br><span class="line">fmtname(char *path)</span><br><span class="line">&#123;</span><br><span class="line">  static char buf[DIRSIZ+1];</span><br><span class="line">  char *p;</span><br><span class="line"></span><br><span class="line">  // Find first character after last slash.</span><br><span class="line">  for(p=path+strlen(path); p &gt;= path &amp;&amp; *p != &#x27;/&#x27;; p--)</span><br><span class="line">    ;</span><br><span class="line">  p++;</span><br><span class="line"></span><br><span class="line">  // Return blank-padded name.</span><br><span class="line">  if(strlen(p) &gt;= DIRSIZ)</span><br><span class="line">    return p;</span><br><span class="line">  memmove(buf, p, strlen(p));</span><br><span class="line">  memset(buf+strlen(p), &#x27; &#x27;, DIRSIZ-strlen(p));</span><br><span class="line">  return buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">ls(char *path)</span><br><span class="line">&#123;</span><br><span class="line">  char buf[512], *p;</span><br><span class="line">  int fd;</span><br><span class="line">  struct dirent de;</span><br><span class="line">  struct stat st;</span><br><span class="line"></span><br><span class="line">  if((fd = open(path, 0)) &lt; 0)&#123;</span><br><span class="line">    fprintf(2, &quot;ls: cannot open %s\n&quot;, path);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if(fstat(fd, &amp;st) &lt; 0)&#123;</span><br><span class="line">    fprintf(2, &quot;ls: cannot stat %s\n&quot;, path);</span><br><span class="line">    close(fd);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switch(st.type)&#123;</span><br><span class="line">  case T_FILE:</span><br><span class="line">    printf(&quot;%s %d %d %l\n&quot;, fmtname(path), st.type, st.ino, st.size);</span><br><span class="line">    break;</span><br><span class="line"></span><br><span class="line">  case T_DIR:</span><br><span class="line">    if(strlen(path) + 1 + DIRSIZ + 1 &gt; sizeof buf)&#123;</span><br><span class="line">      printf(&quot;ls: path too long\n&quot;);</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    strcpy(buf, path);</span><br><span class="line">    p = buf+strlen(buf);</span><br><span class="line">    *p++ = &#x27;/&#x27;;</span><br><span class="line">    while(read(fd, &amp;de, sizeof(de)) == sizeof(de))&#123;</span><br><span class="line">      if(de.inum == 0)</span><br><span class="line">        continue;</span><br><span class="line">      memmove(p, de.name, DIRSIZ);</span><br><span class="line">      p[DIRSIZ] = 0;</span><br><span class="line">      if(stat(buf, &amp;st) &lt; 0)&#123;</span><br><span class="line">        printf(&quot;ls: cannot stat %s\n&quot;, buf);</span><br><span class="line">        continue;</span><br><span class="line">      &#125;</span><br><span class="line">      printf(&quot;%s %d %d %d\n&quot;, fmtname(buf), st.type, st.ino, st.size);</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">  close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  int i;</span><br><span class="line"></span><br><span class="line">  if(argc &lt; 2)&#123;</span><br><span class="line">    ls(&quot;.&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  for(i=1; i&lt;argc; i++)</span><br><span class="line">    ls(argv[i]);</span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是ls.c的内容，从main开始看，首先是判断输入指令的长度，如果是1的话就将当前目录的内容全部输出，如果不是1的话就进行查找对比，随后进入ls函数，ls函数开始的一堆东西不用管，只需要看switch的两个分枝，这里switch的作用是将文件和文件夹进行区分，这也是我们要的，如果st.type是T_FILE的话就证明是一个文件，将他和我们输入的字符串进行比较，如果相匹配的话就输出（但是ls这里是直接将文件名和各种信息输出了），然后我们看T_DIR部分，虽然这部分有些难看懂，但是实际上我们只需要找到ls输出内容的地方就可以了，直接将printf修改为递归，递归的参数中path已经被拷贝到了buf中，所以参数值写buf和file，让他去递归寻找我们的file，剩下的就是写一个比较函数了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line">#include &quot;kernel/fs.h&quot;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">contest(char* path,char* file)&#123;</span><br><span class="line">char *p,*f;</span><br><span class="line">f=file;</span><br><span class="line">for(p=path+strlen(path);p&gt;=path&amp;&amp;*p!=&#x27;/&#x27;;p--)</span><br><span class="line">;</span><br><span class="line">p++;</span><br><span class="line">for(;*p!=0&amp;&amp;*f!=0;p++,f++)&#123;</span><br><span class="line">if(*p!=*f)</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">if(*p!=0||*f!=0)</span><br><span class="line">return 1;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">find(char* path,char* file)&#123;</span><br><span class="line">int fd;</span><br><span class="line">char buf[512],*p;</span><br><span class="line">struct dirent de;</span><br><span class="line">struct stat st;</span><br><span class="line">if((fd=open(path,0))&lt;0)&#123;</span><br><span class="line">fprintf(2,&quot;find:cannot open %s\n&quot;,path);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(fstat(fd,&amp;st)&lt;0)&#123;</span><br><span class="line">fprintf(2,&quot;find:cannot stat %s\n&quot;,path);</span><br><span class="line">close(fd);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">switch(st.type)&#123;</span><br><span class="line">case T_FILE:</span><br><span class="line">if(contest(path,file)==0)</span><br><span class="line">printf(&quot;%s\n&quot;,path);</span><br><span class="line">break;</span><br><span class="line">case T_DIR:</span><br><span class="line">if(strlen(path)+1+DIRSIZ+1&gt;sizeof buf)&#123;</span><br><span class="line">printf(&quot;find:path too long\n&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">strcpy(buf,path);</span><br><span class="line">p=buf+strlen(buf);</span><br><span class="line">*p++=&#x27;/&#x27;;</span><br><span class="line">while(read(fd,&amp;de,sizeof(de))==sizeof(de))&#123;</span><br><span class="line">if(de.inum==0)</span><br><span class="line">continue;</span><br><span class="line">if(strcmp(de.name,&quot;.&quot;)==0||strcmp(de.name,&quot;..&quot;)==0)</span><br><span class="line">continue;</span><br><span class="line">memmove(p,de.name,DIRSIZ);</span><br><span class="line">p[DIRSIZ]=0;</span><br><span class="line">find(buf,file);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main(int argc, char *argv[])&#123;</span><br><span class="line">if(argc!=3)&#123;</span><br><span class="line">printf(&quot;erro!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">find(argv[1],argv[2]);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>contest函数是用来比较当前文件和要寻找的文件是否一致的，如果一致的话就返回0，不一致就返回1，然后我们再来看ls中的fmtname函数，在函数的第一个for循环中有一条注释，翻译过来就是“找到最后一个斜杠后的第一个字符”，经过了这个for循环之后p就会指向第一个字符，而f也指向第一个字符，到了这里，p就变成了读取的列表中的文件名，f就变成了我们要找的文件名，所以再写一个for循环将他们一一进行对比，如果发现不一致的地方就返回1，如果for结束了还没有返回，就检查一下是不是两个指针都指向了最后，如果有一个没有指向最后，那就证明还是不匹配，接着返回1，如果都指向了最后，就说明两个是匹配的，返回0。</p><p>在实验中提到了strcmp函数，但是这个函数在比较buf和f时并不会输出0，我现在暂且不知为何，所以改了改代码直接一个一个的比较了。</p><p><img src="http://cnd.jiangkeer.icu/pingpong.png" alt="avator"></p><h2 id="Xargs-moderate"><a href="#Xargs-moderate" class="headerlink" title="Xargs(moderate)"></a>Xargs(moderate)</h2><p>这次实验要求我们复现xargs指令，这个指令的大致作用是在管道中，将输入的部分放到自己的后面执行，大致例子可以在实验中看到，当输入echo hello|xargs echo bye的时候，会先输出bye再输出hello。</p><p>首先要知道一件事，就是xargs是用在管道的读端的，而上一条指令的结果是会写入管道的，所以我们可以直接read出上一条指令，并且再将指令拼接的自己的argv中，随后再将拼接好的字符串传到exec中执行，就实现了一个简易的xargs指令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line">#include &quot;kernel/param.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main(int argc,char* argv[])&#123;</span><br><span class="line">char buf[32];</span><br><span class="line">int n;</span><br><span class="line">if(argc&lt;2)&#123;</span><br><span class="line">while((n=read(0,buf,sizeof buf))&gt;0)&#123;</span><br><span class="line">write(1,buf,n);</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">char* argvv[MAXARG];</span><br><span class="line">int argcc=argc-1;</span><br><span class="line">for(int i=1;i&lt;argc;++i)&#123;</span><br><span class="line">argvv[i-1]=argv[i];</span><br><span class="line">&#125;</span><br><span class="line">char *p=buf;</span><br><span class="line">while((n=read(0,p,1))&gt;0)&#123;</span><br><span class="line">if(*p==&#x27;\n&#x27;)&#123;</span><br><span class="line">*p=0;</span><br><span class="line">if(fork()==0)&#123;</span><br><span class="line">argvv[argcc]=buf;</span><br><span class="line">exec(argvv[0],argvv);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">wait(0);</span><br><span class="line">&#125;</span><br><span class="line">p=buf;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里读取字符串是通过while来进行的，每次只读一个字节，当读取到\n时就证明读完了一个结果，随后进行字符串的拼接，之后放到exec函数中去执行，因为判断条件是*p==\n所以要将\n去掉，所以这里将\n变成了结束符号0，p=buf是将p指向buf的头，之后读的时候新的结果就会将老的结果覆盖掉。</p>]]></content>
      
      
      <categories>
          
          <category> MIT实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 编成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>testpost</title>
      <link href="/jiangkeer-art.github.io/2021/10/27/testpost/"/>
      <url>/jiangkeer-art.github.io/2021/10/27/testpost/</url>
      
        <content type="html"><![CDATA[<p>测试文章发布</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> test2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/jiangkeer-art.github.io/categories/index.html"/>
      <url>/jiangkeer-art.github.io/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>search</title>
      <link href="/jiangkeer-art.github.io/search/index.html"/>
      <url>/jiangkeer-art.github.io/search/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/jiangkeer-art.github.io/tags/index.html"/>
      <url>/jiangkeer-art.github.io/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
